plugins {
    id 'java'
    id "jacoco"
    id "checkstyle"
    
    id "org.springframework.boot" version "2.7.18" // the latest Spring Boot 2
    id "io.spring.dependency-management" version "1.1.4"

    id "com.github.spotbugs" version "6.1.6"

    id "com.palantir.docker" version "0.36.0"
    id "com.palantir.docker-run" version "0.36.0"
    id "com.palantir.docker-compose" version "0.36.0"

    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

repositories {
    mavenCentral()
}

group = 'org.clematis'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly (
        'org.projectlombok:lombok',
        'com.github.spotbugs:spotbugs:4.8.4',
        'com.google.code.findbugs:annotations:3.0.1u2'
    )
    checkstyle "com.puppycrawl.tools:checkstyle:10.9.3"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
// works only with Spring Boot 2, migrate to https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html
    implementation 'org.keycloak:keycloak-spring-boot-starter:22.0.5'

    runtimeOnly 'org.firebirdsql.jdbc:jaybird-jdk18:4.0.10.java8'

    implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'
    implementation 'org.springdoc:springdoc-openapi-security:1.8.0'
    implementation 'org.springdoc:springdoc-openapi-hateoas:1.8.0'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.8.0'

    implementation 'org.glassfish.main.external:jmxremote_optional-repackaged:5.0'
    // to use regexp in logback.xml
    implementation 'org.codehaus.janino:janino:3.1.12'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly (
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2",
            "org.projectlombok:lombok",
            "org.testcontainers:testcontainers:1.20.3",
            "org.testcontainers:junit-jupiter:1.20.3"
    )

    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.firebirdsql:firebird-testcontainers-java:1.4.0'
    testImplementation 'com.tngtech.keycloakmock:mock-junit5:0.16.0'

}

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.register('checkstyleReport') {
    doLast {
        if (file("${layout.buildDirectory.asFile.get()}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
            ant.xslt(in: "${layout.buildDirectory.asFile.get()}/reports/checkstyle/${project.ext.checkType}.xml",
                    style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                    out: "${layout.buildDirectory.asFile.get()}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
        }
    }
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/*Test*'
}

// ------------ Open API configuration  ---------

openApi {
    outputDir.set(file("docs"))
    outputFileName.set("swagger.json")
    waitTimeInSeconds.set(10)
}

// ------------ JaCoCo configuration  ---------
ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
    setProperty('commons-lang3.version', '3.13.0')
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}

// ------------ Spotbugs configuration  ---------
spotbugs {
    reportsDir = file("${layout.buildDirectory.asFile.get()}/reports/spotbugs/main/spotbugs.html")
    ignoreFailures = true
}

// ----------- Docker configuration -------------
docker {
    name = "atroshin/${project.name}:${version}"
    dockerfile = file('Dockerfile')
    copySpec.from("${layout.buildDirectory.asFile.get()}").into("build")
    pull true
    noCache true
}

dockerCompose {
    dockerComposeFile file("${project.rootDir}/docker/docker-compose.yml")
}

dockerRun {
    name 'clematis.mt.api'
    image "atroshin/${project.name}:${version}"
    ports '18085:8080'
}

springBoot {
    buildInfo {
        properties {
            artifact = 'clematis-mt-api'
            version = project.version
            group = 'org.clematis.mt'
            name = 'Clematis Money Tracker API'
        }
    }
}