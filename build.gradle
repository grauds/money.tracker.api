buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
	    maven {
            url 'http://central.maven.org/maven2/'
        }
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id "com.github.spotbugs-base" version "4.7.0"
    id 'jacoco'
}

group 'name.troshin.anton.clematis'
version = '0.0.1-SNAPSHOT'

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    apply from: file("${project.rootDir}/dependencies.gradle")

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }

    task codeCoverageReport(type: JacocoReport) {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        allprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled true
            csv.enabled false
        }
    }

// always run the tests before generating the report
    codeCoverageReport.dependsOn {
        subprojects.test
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    spotbugsMain {
        reports {
            html {
                enabled = true
                destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            }
        }
    }

    checkstyle {
        configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }

    task checkstyleReport {
        doLast {
            if (file("${buildDir}/reports/checkstyle/${checkType}.xml").exists()) {
                ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

    tasks.withType(Checkstyle) {
        exclude '**/*Test*'
    }

    build {
        dependsOn tasks.codeCoverageReport
    }
}
