plugins {
    id "java"
    id "org.springframework.boot" version "2.7.18"
    id "io.spring.dependency-management" version "1.1.4"

    id "com.github.spotbugs" version "6.0.7"
   // id "org.asciidoctor.jvm.convert" version "3.1.0"
    id "jacoco"
    id "checkstyle"

    id "com.palantir.docker" version "0.36.0"
    id "com.palantir.docker-run" version "0.36.0"
    id "com.palantir.docker-compose" version "0.36.0"
}

group = 'org.clematis'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'

    compileOnly (
        'org.projectlombok:lombok',
        "com.github.spotbugs:spotbugs:4.8.4",
        "com.google.code.findbugs:annotations:3.0.1u2"
    )
    checkstyle "com.puppycrawl.tools:checkstyle:7.8.2"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.keycloak:keycloak-spring-boot-starter:20.0.5'

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-security:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-hateoas:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.14'

    implementation 'org.glassfish.main.external:jmxremote_optional-repackaged:5.0'
    // to use regexp in logback.xml
    implementation 'org.codehaus.janino:janino:3.1.10'

    runtimeOnly 'org.firebirdsql.jdbc:jaybird-jdk18:4.0.6.java8'

    testCompileOnly (
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2",
            "org.projectlombok:lombok",
            "org.testcontainers:testcontainers:1.17.6",
            "org.testcontainers:junit-jupiter:1.17.6"
    )

    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.apache.httpcomponents.client5:httpclient5'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.firebirdsql:firebird-testcontainers-java:1.2.0'
    testImplementation 'com.tngtech.keycloakmock:mock-junit5:0.16.0'
    testImplementation 'io.rest-assured:rest-assured'

}

// ------------ JaCoCo configuration  ---------
ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}
/*
asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
*/
// ------------ Spotbugs configuration  ---------
spotbugsMain {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
}

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.register('checkstyleReport') {
    doLast {
        if (file("${buildDir}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
            ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                    style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                    out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
        }
    }
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/*Test*'
}

docker {
    name = "atroshin/${project.name}:${version}"
    dockerfile = file('Dockerfile')
    copySpec.from("${buildDir}").into("build")
    pull true
    noCache true
}

dockerCompose {
    dockerComposeFile file("${project.rootDir}/docker/docker-compose.yml")
}

dockerRun {
    name 'clematis.mt.api'
    image "atroshin/${project.name}:${version}"
    ports '18085:8080'
}

springBoot {
    buildInfo {
        properties {
            artifact = 'clematis-mt-api'
            version = project.version
            group = 'org.clematis.mt'
            name = 'Clematis Money Tracker API'
        }
    }
}
