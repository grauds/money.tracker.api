CREATE OR ALTER VIEW ALL_OPERATIONS_HISTORY (TRANSFERDATE, ACCOUNT, AMOUNT, MONEY_SIGN, MONEYTYPE) AS
SELECT TRANSFERDATE, ACCOUNT, AMOUNT, MONEY_SIGN, MONEYTYPE FROM (
     SELECT inc.TRANSFERDATE AS TRANSFERDATE, inc.ACCOUNT AS ACCOUNT, inc.TOTAL AS AMOUNT, 1 AS MONEY_SIGN, inc.MONEYTYPE AS MONEYTYPE
     FROM INCOME AS inc
     UNION ALL
     SELECT ex.TRANSFERDATE AS TRANSFERDATE, ex.ACCOUNT AS ACCOUNT, ex.TOTAL AS AMOUNT, -1 AS MONEY_SIGN, ex.MONEYTYPE AS MONEYTYPE
     FROM EXPENSE AS ex
     UNION ALL
     SELECT tr.TRANSFERDATE AS TRANSFERDATE, tr.DEST AS ACCOUNT, tr.DESTAMOUNT AS AMOUNT, 1 AS MONEY_SIGN, tr.MONEYTYPE AS MONEYTYPE
     FROM MONEYTRANSFER AS tr
     UNION ALL
     SELECT tr2.TRANSFERDATE AS TRANSFERDATE, tr2."SOURCE" AS ACCOUNT, tr2.AMOUNT AS AMOUNT, -1 AS MONEY_SIGN, tr2.MONEYTYPE AS MONEYTYPE
     FROM MONEYTRANSFER AS tr2
     UNION ALL
     SELECT mex.EXCHANGEDATE AS TRANSFERDATE, mex.DEST AS ACCOUNT, mex.DESTAMOUNT AS AMOUNT, 1 AS MONEY_SIGN, mex.DESTMONEYTYPE AS MONEYTYPE
     FROM MONEYEXCHANGE AS mex
     UNION ALL
     SELECT mex2.EXCHANGEDATE AS TRANSFERDATE, mex2."SOURCE" AS ACCOUNT, mex2.SOURCEAMOUNT AS AMOUNT, -1 AS MONEY_SIGN, mex2.SOURCEMONEYTYPE AS MONEYTYPE
     FROM MONEYEXCHANGE AS mex2
     UNION ALL
     SELECT br.CREDITDATE AS TRANSFERDATE, br.ACCOUNT AS ACCOUNT, br.CREDITSUM AS AMOUNT, 1 AS MONEY_SIGN, br.MONEYTYPE AS MONEYTYPE
     FROM BORROWING AS br
     UNION ALL
     SELECT brp.PAYMENTDATE AS TRANSFERDATE, brp.ACCOUNT AS ACCOUNT, brp.TOTALPAID AS AMOUNT, -1 AS MONEY_SIGN, brparent.MONEYTYPE AS MONEYTYPE
     FROM BORROWING AS brparent, BORROWINGPAYMENT AS brp
     WHERE brp.STATUS = 1
       AND brp.PAYMENTTYPE = 0
       AND brparent.id = brp.CREDIT
     UNION ALL
     SELECT brp2.PAYMENTDATE AS TRANSFERDATE, brp2.ACCOUNT AS ACCOUNT, brp2.INCREASE AS AMOUNT, 1 AS MONEY_SIGN, br2parent.MONEYTYPE AS MONEYTYPE
     FROM BORROWING AS br2parent, BORROWINGPAYMENT AS brp2
     WHERE brp2.STATUS = 1
       AND brp2.PAYMENTTYPE = 1
       AND br2parent.id = brp2.CREDIT
     UNION ALL
     SELECT ld.CREDITDATE AS TRANSFERDATE, ld.ACCOUNT AS ACCOUNT, ld.CREDITSUM AS AMOUNT, -1 AS MONEY_SIGN, ld.MONEYTYPE AS MONEYTYPE
     FROM LENDING AS ld
     UNION ALL
     SELECT ldp.PAYMENTDATE AS TRANSFERDATE, ldp.ACCOUNT AS ACCOUNT, ldp.TOTALPAID AS AMOUNT, 1 AS MONEY_SIGN, ldparent.MONEYTYPE AS MONEYTYPE
     FROM LENDING AS ldparent, LENDINGPAYMENT AS ldp
     WHERE ldp.STATUS = 1
       AND ldp.PAYMENTTYPE = 0
       AND ldparent.ID = ldp.CREDIT
     UNION ALL
     SELECT ldp2.PAYMENTDATE AS TRANSFERDATE, ldp2.ACCOUNT AS ACCOUNT, ldp2.INCREASE AS AMOUNT, -1 AS MONEY_SIGN, ld2parent.MONEYTYPE AS MONEYTYPE
     FROM LENDING AS ld2parent, LENDINGPAYMENT AS ldp2
     WHERE ldp2.STATUS = 1
       AND ldp2.PAYMENTTYPE = 1
       AND ld2parent.ID = ldp2.CREDIT
    );


----------------------------------------------------------

CREATE OR ALTER VIEW ACCOUNTS_TOTAL_LAST (ID, NAME, BALANCE, TOTAL, CODE) AS
SELECT ACCOUNT as ID, acc.NAME, BALANCE, ROUND(TOTAL, 2), CODE
FROM (SELECT ACCOUNT,
             SUM
                 (CASE
                      WHEN MONEY_SIGN = 1
                          THEN AMOUNT
                      ELSE AMOUNT * (-1) END
                 ) AS TOTAL
      FROM (
               SELECT *
               FROM ALL_OPERATIONS_HISTORY
           )
      GROUP BY ACCOUNT)
         JOIN ACCOUNT AS acc ON acc.ID = ACCOUNT
         JOIN MONEYTYPE AS mt ON acc.MONEYTYPE = mt.ID
ORDER BY TOTAL;

----------------------------------------------------------

CREATE OR ALTER VIEW ACCOUNTS_OPERATIONS (NAME, TRANSFERDATE, AMOUNT, CURRENCY, EX_RATE, SINGLE_CUR_AMOUNT, CUR_CODE) AS
SELECT acc.NAME,
       TRANSFERDATE,
       ROUND(AMOUNT * MONEY_SIGN, 2) AS AMOUNT,
       mt.CODE as CODE,
       coalesce(mtr.RATE, 1) as EX_RATE,
       ROUND((AMOUNT * MONEY_SIGN) / coalesce(mtr.RATE, 1), 2) AS SINGLE_CUR_AMOUNT,
       coalesce(mt2.CODE, 'RUB') as CUR_CODE
FROM ALL_OPERATIONS_HISTORY
         JOIN ACCOUNT AS acc ON acc.ID = ACCOUNT
         JOIN MONEYTYPE AS mt ON acc.MONEYTYPE = mt.ID
         LEFT JOIN MONEYTYPERATE AS mtr ON
             (select first 1 RATEDATE from MONEYTYPERATE
                where RATEDATE <= TRANSFERDATE ORDER BY RATEDATE DESC) = mtr.RATEDATE
                 AND acc.MONEYTYPE = mtr.SELLMONEYTYPE AND mtr.BUYMONEYTYPE = 1
         LEFT JOIN MONEYTYPE AS mt2 ON mtr.BUYMONEYTYPE = mt2.ID
ORDER BY TRANSFERDATE;

----------------------------------------------------------

CREATE OR ALTER VIEW LAST_COMMODITIES_VIEW (ID, NAME, PRICE, CURRENCY, QTY, TRANSACTION_DATE, ORG, DAYS_AGO) AS
SELECT c.ID                                                 AS ID,
       c.NAME                                               AS NAME,
       item.PRICE                                           AS PRICE,
       m.CODE                                               AS CURRENCY,
       item.QTY                                             AS QTY,
       item.TRANSFERDATE                                    AS TRANSACTION_DATE,
       o.NAME                                               AS ORG,
       datediff(DAY FROM item.TRANSFERDATE TO current_date) AS DAYS_AGO
FROM EXPENSEITEM AS item

         JOIN (

-- SELECT THE ONES WITH LATEST TRANSACTION TIME
    SELECT *
    FROM (SELECT c.ID, MAX(item.TRANSFERDATE) AS LATEST
          FROM COMMODITY c
                   JOIN EXPENSEITEM item ON item.COMM = c.ID
          GROUP BY c.ID
          ORDER BY LATEST DESC)
    WHERE LATEST > DATEADD(YEAR, -15, CURRENT_DATE)
) e ON e.ID = item.COMM AND e.LATEST = item.TRANSFERDATE
         JOIN ORGANIZATION o ON o.ID = item.TRADEPLACE
         JOIN COMMODITY c ON c.ID = item.COMM
         JOIN EXPENSE ex ON ex.ID = item.EXPENSE
         JOIN MONEYTYPE m ON ex.MONEYTYPE = m.ID
ORDER BY DAYS_AGO DESC;

----------------------------------------------------------

CREATE OR ALTER VIEW COMMODITIES_BUCKET_PER_MONTH ("YEAR", "MONTH", COMMODITIES) AS
SELECT
    EXTRACT(YEAR FROM EXPENSEITEM.TRANSFERDATE) as "YEAR",
    EXTRACT(MONTH FROM EXPENSEITEM.TRANSFERDATE) as "MONTH",
    COUNT(DISTINCT(EXPENSEITEM.COMM)) AS COMMODITIES

FROM EXPENSEITEM
GROUP BY "YEAR", "MONTH";

----------------------------------------------------------

CREATE OR ALTER VIEW LAST_COMMODITIES_PER_MONTH ("YEAR", "MONTH", COMMODITIES)
AS
SELECT
    EXTRACT(YEAR FROM LAST_COMMODITIES_VIEW.TRANSACTION_DATE) as "YEAR",
    EXTRACT(MONTH FROM LAST_COMMODITIES_VIEW.TRANSACTION_DATE) as "MONTH",
    COUNT(*) AS COMMODITIES

FROM LAST_COMMODITIES_VIEW
GROUP BY "YEAR", "MONTH";

----------------------------------------------------------

CREATE OR ALTER VIEW DAILY_DELTA (TRANSFERDATE, DELTA, CODE) AS
SELECT TRANSFERDATE, ROUND(TOTAL, 2) AS DELTA, CODE
FROM (SELECT TRANSFERDATE,
             SUM
                 (CASE
                      WHEN MONEY_SIGN = 1
                          THEN AMOUNT
                      ELSE AMOUNT * (-1) END
                 ) AS TOTAL,
             MONEYTYPE
      FROM (
               SELECT *
               FROM ALL_OPERATIONS_HISTORY
           )
      GROUP BY TRANSFERDATE, MONEYTYPE)
         JOIN MONEYTYPE AS mt ON MONEYTYPE = mt.ID
ORDER BY TRANSFERDATE;

----------------------------------------------------------

CREATE OR ALTER VIEW MONTHLY_DELTA ("MONTH", "YEAR", DELTA, CODE) AS
SELECT "MONTH", "YEAR", ROUND(TOTAL, 2) AS DELTA, CODE
FROM (SELECT EXTRACT(MONTH FROM TRANSFERDATE) AS "MONTH",
             EXTRACT(YEAR FROM TRANSFERDATE) AS "YEAR",
             SUM
                 (CASE
                      WHEN MONEY_SIGN = 1
                          THEN AMOUNT
                      ELSE AMOUNT * (-1) END
                 ) AS TOTAL,
             MONEYTYPE
      FROM (
               SELECT *
               FROM ALL_OPERATIONS_HISTORY
           )
      GROUP BY EXTRACT(MONTH FROM TRANSFERDATE), EXTRACT(YEAR FROM TRANSFERDATE), MONEYTYPE)
         JOIN MONEYTYPE AS mt ON MONEYTYPE = mt.ID
ORDER BY "YEAR", "MONTH";

----------------------------------------------------------





